{"version":3,"sources":["modules/components/projects.component.tsx","modules/TensorFlow/LinearRegression/LinearRegression.tsx","modules/home/HomePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Projects","href","LinearRegression","React","useState","value","setValue","isLoading","setIsLoading","onClick","model","tf","add","dense","units","inputShape","compile","loss","optimizer","xs","ys","fit","epochs","then","pred","predict","toString","Home","center","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6OAEaA,EAAyB,WACpC,OACE,oCACE,wCAEA,uBAAGC,KAAK,+CACN,6CAEF,mHAEA,uBAAGA,KAAK,2CACN,sCAEF,+FAEA,uBAAGA,KAAK,6CACN,+CAEF,iJ,eCjBOC,EAAiC,WAAO,IAAD,EACxBC,IAAMC,SAAS,MADS,mBAC3CC,EAD2C,KACpCC,EADoC,OAGhBH,IAAMC,UAAS,GAHC,mBAG3CG,EAH2C,KAGhCC,EAHgC,KAgClD,OACE,oCACE,mDACW,OAAVH,EACC,4BAAKA,GACHE,EACF,0CAEA,yCAEF,4BAAQE,QArCG,WAEb,IAAMC,EAAQC,MACdD,EAAME,IAAID,IAAUE,MAAM,CAAEC,MAAO,EAAGC,WAAY,CAAC,MAGnDL,EAAMM,QAAQ,CAAEC,KAAM,mBAAoBC,UAAW,QAGrD,IAAMC,EAAKR,IAAY,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,IACnCS,EAAKT,IAAY,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,IAEzCH,GAAa,GAGbE,EACGW,IAAIF,EAAIC,EAAI,CACXE,OAAQ,MAETC,MAAK,WAEJ,IAAMC,EAAOd,EAAMe,QAAQd,IAAY,CAAC,GAAI,CAAC,EAAG,KAChDL,EAASkB,EAAKE,YACdlB,GAAa,QAcf,kBCxCOmB,EAAqB,WAChC,OACE,kBAAC,OAAD,KACE,kBAAC,MAAD,CAAKC,OAAO,MACV,kBAAC,MAAD,KACA,kBAAC,EAAD,MACE,kBAAC,EAAD,UCCKC,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8168a0d9.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Projects: React.FC<{}> = () => {\n  return (\n    <>\n      <h1>Projetos</h1>\n\n      <a href=\"https://github.com/GrupoTuring/Quant-basics\">\n        <h2>Quant Basics</h2>\n      </a>\n      <body>Projeto didático de finanças quantitativas para os trainees do Grupo Turing</body>\n\n      <a href=\"https://github.com/GrupoTuring/Momentum\">\n        <h2>TSMOM</h2>\n      </a>\n      <body>O algoritmo de investimento que teve 951,62% de rentabilidade</body>\n\n      <a href=\"https://github.com/lucas-leme/ticTacToeAI\">\n        <h2>Tic Tac Toe AI</h2>\n      </a>\n      <body>\n        Jogo da velha com inteligência artificial invencível, construido com\n        tecnicas de Reinforciment Learning\n      </body>\n    </>\n  );\n};\n","import React from \"react\";\nimport * as tf from '@tensorflow/tfjs';\n\nexport const LinearRegression: React.FC<{}> = () => {\n  const [value, setValue] = React.useState(null);\n\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const modelo = () => {\n    // Define a model for linear regression.\n    const model = tf.sequential();\n    model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\n\n    // Prepare the model for training: Specify the loss and the optimizer.\n    model.compile({ loss: \"meanSquaredError\", optimizer: \"sgd\" });\n\n    // Generate some synthetic data for training.\n    const xs = tf.tensor2d([1, 2, 3, 4], [4, 1]);\n    const ys = tf.tensor2d([2, 4, 6, 8], [4, 1]);\n\n    setIsLoading(true);\n\n    // Train the model using the data.\n    model\n      .fit(xs, ys, {\n        epochs: 1000,\n      })\n      .then(() => {\n        // Use the model to do inference on a data point the model hasn't seen before:\n        const pred = model.predict(tf.tensor2d([5], [1, 1]));\n        setValue(pred.toString());\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <>\n      <h1>Regressão linear</h1>\n      {value !== null ? (\n        <h1>{value}</h1>\n      ) : isLoading ? (\n        <h1>Carregando</h1>\n      ) : (\n        <h1>Sem valor</h1>\n      )}\n      <button onClick={modelo}>Rodar modelo</button>\n    </>\n  );\n};\n","import React from \"react\";\nimport { Grid, Row, Col } from \"react-flexbox-grid\";\nimport { Projects } from \"../components/projects.component\";\nimport { LinearRegression } from \"../TensorFlow/LinearRegression/LinearRegression\";\n\nexport const Home: React.FC<{}> = () => {\n  return (\n    <Grid>\n      <Row center='xs'>\n        <Col>\n        <LinearRegression />\n          <Projects />\n        </Col>\n      </Row>\n    </Grid>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { Home } from \"./modules/home/HomePage\";\n\nfunction App() {\n  return (\n    <>\n      <Home />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}